{"version":3,"sources":["Timer.module.css","logo.svg","Timer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","container","timer","buttonsContainer","button","timerContainer","animatedContainer","open","close","__webpack_require__","p","AnimatedContainer","_ref","prevTimer","_React$useState","React","useState","_React$useState2","Object","slicedToArray","mounted","setMounted","useLayoutEffect","requestAnimationFrame","react_default","a","createElement","key","className","concat","styles","Timer","_ref2","_ref2$step","step","_ref2$initialValue","initialValue","_ref2$startOnMount","startOnMount","_React$useState3","_React$useState4","setTimer","useMemo","intervalId","useRef","start","current","setInterval","t","stop","clearInterval","useEffect","String","onClick","App","src_Timer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0EACAA,EAAAC,QAAA,CAAkBC,UAAA,yBAAAC,MAAA,qBAAAC,iBAAA,gCAAAC,OAAA,sBAAAC,eAAA,8BAAAC,kBAAA,iCAAAC,KAAA,oBAAAC,MAAA,kGCDlBT,EAAAC,QAAiBS,EAAAC,EAAuB,uKCGxC,SAASC,EAATC,GAA0C,IAAbC,EAAaD,EAAbC,UAAaC,EACVC,IAAMC,UAAS,GADLC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACjCM,EADiCH,EAAA,GACxBI,EADwBJ,EAAA,GAOxC,OALAF,IAAMO,gBAAgB,WACpBC,sBAAsB,WACpBF,GAAW,MAEZ,IAEDG,EAAAC,EAAAC,cAAA,OACEC,IAAKd,EACLe,UAAS,GAAAC,OAAKC,IAAOxB,kBAAZ,KAAAuB,OACPT,EAAUU,IAAOtB,MAAQsB,IAAOvB,OAElCiB,EAAAC,EAAAC,cAAA,KAAGE,UAAWE,IAAO5B,OAAQW,IAoDpBkB,MAhDf,SAAAC,GAAqE,IAAAC,EAAAD,EAApDE,YAAoD,IAAAD,EAA7C,EAA6CA,EAAAE,EAAAH,EAA1CI,oBAA0C,IAAAD,EAA3B,EAA2BA,EAAAE,EAAAL,EAAxBM,oBAAwB,IAAAD,KAAAE,EACzCxB,IAAMC,SAASoB,GAD0BI,EAAAtB,OAAAC,EAAA,EAAAD,CAAAqB,EAAA,GAC5DrC,EAD4DsC,EAAA,GACrDC,EADqDD,EAAA,GAE7D3B,EAAYE,IAAM2B,QAAQ,kBAAMxC,EAAQgC,GAAM,CAAChC,IACjDyC,EAAa5B,IAAM6B,OAAO,MACxBC,EAAQ,WACRF,EAAWG,UACfH,EAAWG,QAAUC,YAAY,WAC/BN,EAAS,SAAAO,GAAC,OAAIA,EAAId,KACjB,OAECe,EAAO,WACXC,cAAcP,EAAWG,SACzBH,EAAWG,QAAU,MAYvB,OANA/B,IAAMoC,UAAU,WACVb,GACFO,KAED,IAGDrB,EAAAC,EAAAC,cAAA,OAAKE,UAAWE,IAAO7B,WACrBuB,EAAAC,EAAAC,cAAA,OAAKE,UAAS,GAAAC,OAAKC,IAAOzB,eAAZ,MACZmB,EAAAC,EAAAC,cAAA,OAAKE,UAAS,GAAAC,OAAKC,IAAOxB,kBAAZ,KAAAuB,OAAiCC,IAAOvB,OACpDiB,EAAAC,EAAAC,cAAA,KAAGE,UAAWE,IAAO5B,OAAQA,IAE/BsB,EAAAC,EAAAC,cAACf,EAAD,CAAmBgB,IAAKyB,OAAOlD,GAAQW,UAAWA,KAEpDW,EAAAC,EAAAC,cAAA,OAAKE,UAAWE,IAAO3B,kBACrBqB,EAAAC,EAAAC,cAAA,UAAQE,UAAWE,IAAO1B,OAAQiD,QAASR,GAA3C,SAGArB,EAAAC,EAAAC,cAAA,UAAQE,UAAWE,IAAO1B,OAAQiD,QAASJ,GAA3C,SAGAzB,EAAAC,EAAAC,cAAA,UAAQE,UAAWE,IAAO1B,OAAQiD,QAzB1B,WACZJ,IACAR,EAASL,KAuBL,UAIFZ,EAAAC,EAAAC,cAAA,yFC9CS4B,MARf,WACE,OACE9B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAC6B,EAAD,CAAOrB,KAAM,EAAGE,aAAc,EAAGE,cAAc,MCAjCkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.192865f4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Timer_container__2Ya4W\",\"timer\":\"Timer_timer__2kr_1\",\"buttonsContainer\":\"Timer_buttonsContainer__266fB\",\"button\":\"Timer_button__35L1L\",\"timerContainer\":\"Timer_timerContainer__B6aeW\",\"animatedContainer\":\"Timer_animatedContainer__2gD64\",\"open\":\"Timer_open__3sbWY\",\"close\":\"Timer_close__2dEwr\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport styles from './Timer.module.css';\n\nfunction AnimatedContainer({ prevTimer }) {\n  const [mounted, setMounted] = React.useState(false);\n  React.useLayoutEffect(() => {\n    requestAnimationFrame(() => {\n      setMounted(true);\n    });\n  }, []);\n  return (\n    <div\n      key={prevTimer}\n      className={`${styles.animatedContainer} ${\n        mounted ? styles.close : styles.open\n      }`}>\n      <p className={styles.timer}>{prevTimer}</p>\n    </div>\n  );\n}\nfunction Timer({ step = 1, initialValue = 0, startOnMount = false }) {\n  const [timer, setTimer] = React.useState(initialValue);\n  const prevTimer = React.useMemo(() => timer - step, [timer]);\n  let intervalId = React.useRef(null);\n  const start = () => {\n    if (intervalId.current) return;\n    intervalId.current = setInterval(() => {\n      setTimer(t => t + step);\n    }, 1000);\n  };\n  const stop = () => {\n    clearInterval(intervalId.current);\n    intervalId.current = null;\n  };\n  const reset = () => {\n    stop();\n    setTimer(initialValue);\n  };\n  React.useEffect(() => {\n    if (startOnMount) {\n      start();\n    }\n  }, []);\n\n  return (\n    <div className={styles.container}>\n      <div className={`${styles.timerContainer} ${''}`}>\n        <div className={`${styles.animatedContainer} ${styles.open}`}>\n          <p className={styles.timer}>{timer}</p>\n        </div>\n        <AnimatedContainer key={String(timer)} prevTimer={prevTimer} />\n      </div>\n      <div className={styles.buttonsContainer}>\n        <button className={styles.button} onClick={start}>\n          Start\n        </button>\n        <button className={styles.button} onClick={stop}>\n          Pause\n        </button>\n        <button className={styles.button} onClick={reset}>\n          Reset\n        </button>\n      </div>\n      <p>لطفا کلیک کنید</p>\n    </div>\n  );\n}\n\nexport default Timer;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Timer from './Timer';\n\n// function Div({ children, ...props }) {\n//   return <div {...props}>{children}</div>;\n// }\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timer step={1} initialValue={5} startOnMount={true} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}